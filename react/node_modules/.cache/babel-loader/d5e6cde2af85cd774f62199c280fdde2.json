{"ast":null,"code":"import _classCallCheck from \"/Users/williamsnathan/src/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/williamsnathan/src/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { logUser } from 'services/user/actions';\nvar INPUT_WINDOW = 1000\n/* milliseconds */\n;\n\nvar ScanMiddleware =\n/*#__PURE__*/\nfunction () {\n  function ScanMiddleware() {\n    var _this = this;\n\n    _classCallCheck(this, ScanMiddleware);\n\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n    return function (store) {\n      _this.store = store;\n      return _this.muxer();\n    };\n  }\n\n  _createClass(ScanMiddleware, [{\n    key: \"muxer\",\n    value: function muxer() {\n      return function (next) {\n        return function (action) {\n          return next(action);\n        };\n      };\n    }\n    /**\n     * Determines whether a KEY_DOWN event marks the beginning of user id based\n     * on details of the KEY_DOWN event in {@code event}.\n     */\n\n  }, {\n    key: \"shouldListen\",\n    value: function shouldListen(event) {\n      console.log(event.key + ' ' + event.altKey);\n      return event.key === 'k' && event.altKey;\n    }\n    /**\n     * Handles KEY_DOWN actions. If a key press of ALT+k is detected, then the\n     * numeric inputs that follow within the {@code INPUT_WINDOW} are assumed to be\n     * a user id.\n     */\n\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(event) {\n      var _this2 = this;\n\n      if (!this.listen && this.shouldListen(event)) {\n        this.id = 0;\n        this.listen = true;\n        setTimeout(function () {\n          _this2.listen = false;\n\n          _this2.store.dispatch(logUser(_this2.id));\n        }, INPUT_WINDOW);\n      } else if (this.listen) {\n        var i = parseInt(event.key, 10);\n\n        if (i) {\n          this.id = this.id * 10 + i;\n        }\n      }\n    }\n  }]);\n\n  return ScanMiddleware;\n}();\n\nexport { ScanMiddleware as default };","map":{"version":3,"sources":["/Users/williamsnathan/src/dashboard/src/services/scan/middleware.js"],"names":["logUser","INPUT_WINDOW","ScanMiddleware","document","addEventListener","handleKeyDown","bind","store","muxer","next","action","event","console","log","key","altKey","listen","shouldListen","id","setTimeout","dispatch","i","parseInt"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,uBAAxB;AAGA,IAAMC,YAAY,GAAG;AAAK;AAA1B;;IAGqBC,c;;;AAEnB,4BAAc;AAAA;;AAAA;;AACZC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqC,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArC;AACA,WAAO,UAAAC,KAAK,EAAI;AACd,MAAA,KAAI,CAACA,KAAL,GAAaA,KAAb;AACA,aAAO,KAAI,CAACC,KAAL,EAAP;AACD,KAHD;AAID;;;;4BAEO;AACN,aAAO,UAAAC,IAAI;AAAA,eAAI,UAAAC,MAAM,EAAI;AACvB,iBAAOD,IAAI,CAACC,MAAD,CAAX;AACD,SAFU;AAAA,OAAX;AAGD;AAED;;;;;;;iCAIaC,K,EAAO;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,GAAN,GAAY,GAAZ,GAAkBH,KAAK,CAACI,MAApC;AACA,aAAOJ,KAAK,CAACG,GAAN,KAAc,GAAd,IAAqBH,KAAK,CAACI,MAAlC;AACD;AAED;;;;;;;;kCAKcJ,K,EAAO;AAAA;;AACnB,UAAI,CAAC,KAAKK,MAAN,IAAgB,KAAKC,YAAL,CAAkBN,KAAlB,CAApB,EAA8C;AAC5C,aAAKO,EAAL,GAAU,CAAV;AACA,aAAKF,MAAL,GAAc,IAAd;AACAG,QAAAA,UAAU,CAAC,YAAM;AACf,UAAA,MAAI,CAACH,MAAL,GAAc,KAAd;;AACA,UAAA,MAAI,CAACT,KAAL,CAAWa,QAAX,CAAoBpB,OAAO,CAAC,MAAI,CAACkB,EAAN,CAA3B;AACD,SAHS,EAGPjB,YAHO,CAAV;AAID,OAPD,MAOO,IAAI,KAAKe,MAAT,EAAiB;AACtB,YAAMK,CAAC,GAAGC,QAAQ,CAACX,KAAK,CAACG,GAAP,EAAY,EAAZ,CAAlB;;AACA,YAAIO,CAAJ,EAAO;AACL,eAAKH,EAAL,GAAU,KAAKA,EAAL,GAAU,EAAV,GAAeG,CAAzB;AACD;AACF;AACF;;;;;;SA5CkBnB,c","sourcesContent":["import { logUser } from 'services/user/actions';\n\n\nconst INPUT_WINDOW = 1000 /* milliseconds */;\n\n\nexport default class ScanMiddleware {\n\n  constructor() {\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n    return store => {\n      this.store = store;\n      return this.muxer();\n    };\n  }\n\n  muxer() {\n    return next => action => {\n      return next(action);\n    };\n  }\n\n  /**\n   * Determines whether a KEY_DOWN event marks the beginning of user id based\n   * on details of the KEY_DOWN event in {@code event}.\n   */\n  shouldListen(event) {\n    console.log(event.key + ' ' + event.altKey);\n    return event.key === 'k' && event.altKey;\n  }\n\n  /**\n   * Handles KEY_DOWN actions. If a key press of ALT+k is detected, then the\n   * numeric inputs that follow within the {@code INPUT_WINDOW} are assumed to be\n   * a user id.\n   */\n  handleKeyDown(event) {\n    if (!this.listen && this.shouldListen(event)) {\n      this.id = 0;\n      this.listen = true;\n      setTimeout(() => {\n        this.listen = false;\n        this.store.dispatch(logUser(this.id));\n      }, INPUT_WINDOW);\n    } else if (this.listen) {\n      const i = parseInt(event.key, 10);\n      if (i) {\n        this.id = this.id * 10 + i;\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}