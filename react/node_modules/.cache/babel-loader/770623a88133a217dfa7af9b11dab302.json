{"ast":null,"code":"\"use strict\"; // Copyright 2018, Google, LLC.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _classCallCheck = require(\"/Users/williamsnathan/src/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/williamsnathan/src/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar apirequest_1 = require(\"./apirequest\");\n\nvar Endpoint =\n/*#__PURE__*/\nfunction () {\n  function Endpoint(options) {\n    _classCallCheck(this, Endpoint);\n\n    this._options = options || {};\n  }\n  /**\n   * Given a schema, add methods and resources to a target.\n   *\n   * @param {object} target The target to which to apply the schema.\n   * @param {object} rootSchema The top-level schema, so we don't lose track of it\n   * during recursion.\n   * @param {object} schema The current schema from which to extract methods and\n   * resources.\n   * @param {object} context The context to add to each method.\n   */\n\n\n  _createClass(Endpoint, [{\n    key: \"applySchema\",\n    value: function applySchema(target, rootSchema, schema, context) {\n      this.applyMethodsFromSchema(target, rootSchema, schema, context);\n\n      if (schema.resources) {\n        for (var resourceName in schema.resources) {\n          if (schema.resources.hasOwnProperty(resourceName)) {\n            var resource = schema.resources[resourceName];\n\n            if (!target[resourceName]) {\n              target[resourceName] = {};\n            }\n\n            this.applySchema(target[resourceName], rootSchema, resource, context);\n          }\n        }\n      }\n    }\n    /**\n     * Given a schema, add methods to a target.\n     *\n     * @param {object} target The target to which to apply the methods.\n     * @param {object} rootSchema The top-level schema, so we don't lose track of it\n     * during recursion.\n     * @param {object} schema The current schema from which to extract methods.\n     * @param {object} context The context to add to each method.\n     */\n\n  }, {\n    key: \"applyMethodsFromSchema\",\n    value: function applyMethodsFromSchema(target, rootSchema, schema, context) {\n      if (schema.methods) {\n        for (var name in schema.methods) {\n          if (schema.methods.hasOwnProperty(name)) {\n            var method = schema.methods[name];\n            target[name] = this.makeMethod(rootSchema, method, context);\n          }\n        }\n      }\n    }\n    /**\n     * Given a method schema, add a method to a target.\n     *\n     * @param target The target to which to add the method.\n     * @param schema The top-level schema that contains the rootUrl, etc.\n     * @param method The method schema from which to generate the method.\n     * @param context The context to add to the method.\n     */\n\n  }, {\n    key: \"makeMethod\",\n    value: function makeMethod(schema, method, context) {\n      var _this = this;\n\n      return function (paramsOrCallback, callback) {\n        var params = typeof paramsOrCallback === 'function' ? {} : paramsOrCallback;\n        callback = typeof paramsOrCallback === 'function' ? paramsOrCallback : callback;\n        var schemaUrl = buildurl(schema.rootUrl + schema.servicePath + method.path);\n        var parameters = {\n          options: {\n            url: schemaUrl.substring(1, schemaUrl.length - 1),\n            method: method.httpMethod\n          },\n          params: params,\n          requiredParams: method.parameterOrder || [],\n          pathParams: _this.getPathParams(method.parameters),\n          context: context\n        };\n\n        if (method.mediaUpload && method.mediaUpload.protocols && method.mediaUpload.protocols.simple && method.mediaUpload.protocols.simple.path) {\n          var mediaUrl = buildurl(schema.rootUrl + method.mediaUpload.protocols.simple.path);\n          parameters.mediaUrl = mediaUrl.substring(1, mediaUrl.length - 1);\n        }\n\n        if (!callback) {\n          return apirequest_1.createAPIRequest(parameters);\n        }\n\n        apirequest_1.createAPIRequest(parameters, callback);\n        return;\n      };\n    }\n  }, {\n    key: \"getPathParams\",\n    value: function getPathParams(params) {\n      var pathParams = new Array();\n\n      if (typeof params !== 'object') {\n        params = {};\n      }\n\n      Object.keys(params).forEach(function (key) {\n        if (params[key].location === 'path') {\n          pathParams.push(key);\n        }\n      });\n      return pathParams;\n    }\n  }]);\n\n  return Endpoint;\n}();\n\nexports.Endpoint = Endpoint;\n/**\n * Build a string used to create a URL from the discovery doc provided URL.\n * replace double slashes with single slash (except in https://)\n * @private\n * @param  input URL to build from\n * @return Resulting built URL\n */\n\nfunction buildurl(input) {\n  return input ? \"'\".concat(input, \"'\").replace(/([^:]\\/)\\/+/g, '$1') : '';\n}","map":null,"metadata":{},"sourceType":"script"}