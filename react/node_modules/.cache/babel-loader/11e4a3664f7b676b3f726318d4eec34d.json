{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"/Users/williamsnathan/src/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/williamsnathan/src/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar appengine_v1beta5;\n\n(function (appengine_v1beta5) {\n  /**\n   * App Engine Admin API\n   *\n   * Provisions and manages developers&#39; App Engine applications.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const appengine = google.appengine('v1beta5');\n   *\n   * @namespace appengine\n   * @type {Function}\n   * @version v1beta5\n   * @variation v1beta5\n   * @param {object=} options Options for Appengine\n   */\n  var Appengine =\n  /*#__PURE__*/\n  function () {\n    function Appengine(options, google) {\n      _classCallCheck(this, Appengine);\n\n      this.root = this;\n      this._options = options || {};\n      this.google = google;\n      this.getRoot.bind(this);\n      this.apps = new Resource$Apps(this);\n    }\n\n    _createClass(Appengine, [{\n      key: \"getRoot\",\n      value: function getRoot() {\n        return this.root;\n      }\n    }]);\n\n    return Appengine;\n  }();\n\n  appengine_v1beta5.Appengine = Appengine;\n\n  var Resource$Apps =\n  /*#__PURE__*/\n  function () {\n    function Resource$Apps(root) {\n      _classCallCheck(this, Resource$Apps);\n\n      this.root = root;\n      this.getRoot.bind(this);\n      this.locations = new Resource$Apps$Locations(root);\n      this.operations = new Resource$Apps$Operations(root);\n      this.services = new Resource$Apps$Services(root);\n    }\n\n    _createClass(Resource$Apps, [{\n      key: \"getRoot\",\n      value: function getRoot() {\n        return this.root;\n      }\n    }, {\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: [],\n          pathParams: [],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps;\n  }();\n\n  appengine_v1beta5.Resource$Apps = Resource$Apps;\n\n  var Resource$Apps$Locations =\n  /*#__PURE__*/\n  function () {\n    function Resource$Apps$Locations(root) {\n      _classCallCheck(this, Resource$Apps$Locations);\n\n      this.root = root;\n      this.getRoot.bind(this);\n    }\n\n    _createClass(Resource$Apps$Locations, [{\n      key: \"getRoot\",\n      value: function getRoot() {\n        return this.root;\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/locations/{locationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'locationsId'],\n          pathParams: ['appsId', 'locationsId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Locations;\n  }();\n\n  appengine_v1beta5.Resource$Apps$Locations = Resource$Apps$Locations;\n\n  var Resource$Apps$Operations =\n  /*#__PURE__*/\n  function () {\n    function Resource$Apps$Operations(root) {\n      _classCallCheck(this, Resource$Apps$Operations);\n\n      this.root = root;\n      this.getRoot.bind(this);\n    }\n\n    _createClass(Resource$Apps$Operations, [{\n      key: \"getRoot\",\n      value: function getRoot() {\n        return this.root;\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/operations/{operationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'operationsId'],\n          pathParams: ['appsId', 'operationsId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Operations;\n  }();\n\n  appengine_v1beta5.Resource$Apps$Operations = Resource$Apps$Operations;\n\n  var Resource$Apps$Services =\n  /*#__PURE__*/\n  function () {\n    function Resource$Apps$Services(root) {\n      _classCallCheck(this, Resource$Apps$Services);\n\n      this.root = root;\n      this.getRoot.bind(this);\n      this.versions = new Resource$Apps$Services$Versions(root);\n    }\n\n    _createClass(Resource$Apps$Services, [{\n      key: \"getRoot\",\n      value: function getRoot() {\n        return this.root;\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['appsId', 'servicesId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['appsId', 'servicesId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/services').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId'],\n          pathParams: ['appsId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['appsId', 'servicesId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Services;\n  }();\n\n  appengine_v1beta5.Resource$Apps$Services = Resource$Apps$Services;\n\n  var Resource$Apps$Services$Versions =\n  /*#__PURE__*/\n  function () {\n    function Resource$Apps$Services$Versions(root) {\n      _classCallCheck(this, Resource$Apps$Services$Versions);\n\n      this.root = root;\n      this.getRoot.bind(this);\n      this.instances = new Resource$Apps$Services$Versions$Instances(root);\n    }\n\n    _createClass(Resource$Apps$Services$Versions, [{\n      key: \"getRoot\",\n      value: function getRoot() {\n        return this.root;\n      }\n    }, {\n      key: \"create\",\n      value: function create(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['appsId', 'servicesId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId', 'versionsId'],\n          pathParams: ['appsId', 'servicesId', 'versionsId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId', 'versionsId'],\n          pathParams: ['appsId', 'servicesId', 'versionsId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}/versions').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId'],\n          pathParams: ['appsId', 'servicesId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"patch\",\n      value: function patch(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'PATCH'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId', 'versionsId'],\n          pathParams: ['appsId', 'servicesId', 'versionsId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Services$Versions;\n  }();\n\n  appengine_v1beta5.Resource$Apps$Services$Versions = Resource$Apps$Services$Versions;\n\n  var Resource$Apps$Services$Versions$Instances =\n  /*#__PURE__*/\n  function () {\n    function Resource$Apps$Services$Versions$Instances(root) {\n      _classCallCheck(this, Resource$Apps$Services$Versions$Instances);\n\n      this.root = root;\n      this.getRoot.bind(this);\n    }\n\n    _createClass(Resource$Apps$Services$Versions$Instances, [{\n      key: \"getRoot\",\n      value: function getRoot() {\n        return this.root;\n      }\n    }, {\n      key: \"debug\",\n      value: function debug(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}:debug').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'POST'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n          pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"delete\",\n      value: function _delete(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'DELETE'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n          pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId', 'versionsId', 'instancesId'],\n          pathParams: ['appsId', 'instancesId', 'servicesId', 'versionsId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }, {\n      key: \"list\",\n      value: function list(paramsOrCallback, optionsOrCallback, callback) {\n        var params = paramsOrCallback || {};\n        var options = optionsOrCallback || {};\n\n        if (typeof paramsOrCallback === 'function') {\n          callback = paramsOrCallback;\n          params = {};\n          options = {};\n        }\n\n        if (typeof optionsOrCallback === 'function') {\n          callback = optionsOrCallback;\n          options = {};\n        }\n\n        var rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n        var parameters = {\n          options: Object.assign({\n            url: (rootUrl + '/v1beta5/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n            method: 'GET'\n          }, options),\n          params: params,\n          requiredParams: ['appsId', 'servicesId', 'versionsId'],\n          pathParams: ['appsId', 'servicesId', 'versionsId'],\n          context: this.getRoot()\n        };\n\n        if (callback) {\n          googleapis_common_1.createAPIRequest(parameters, callback);\n        } else {\n          return googleapis_common_1.createAPIRequest(parameters);\n        }\n      }\n    }]);\n\n    return Resource$Apps$Services$Versions$Instances;\n  }();\n\n  appengine_v1beta5.Resource$Apps$Services$Versions$Instances = Resource$Apps$Services$Versions$Instances;\n})(appengine_v1beta5 = exports.appengine_v1beta5 || (exports.appengine_v1beta5 = {}));","map":null,"metadata":{},"sourceType":"script"}