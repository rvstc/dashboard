{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateInnerScales = exports.calculateScale = undefined;\n\nvar _util = require('./util');\n\nvar _constants = require('./constants');\n/* eslint-disable import/no-unresolved, import/extensions */\n\n\nvar TRANSITION_X1 = 0;\n/* eslint-enable import/no-unresolved, import/extensions */\n\nvar TRANSITION_Y1 = 0;\nvar TRANSITION_X2 = 0.2;\nvar TRANSITION_Y2 = 1;\n\nvar ease = function ease(time) {\n  return (0, _util.bezierProgress)(time, TRANSITION_X1, TRANSITION_Y1, TRANSITION_X2, TRANSITION_Y2);\n};\n\nvar calculateScale = exports.calculateScale = function calculateScale(animationProgress, isOpening, numItems) {\n  var currentTimeX = (0, _util.clamp)((animationProgress - _constants.TRANSITION_SCALE_ADJUSTMENT_X) / (1 - _constants.TRANSITION_SCALE_ADJUSTMENT_X));\n  var currentTimeY = animationProgress;\n  var startScale = isOpening ? 0 : 1;\n  var targetScale = isOpening ? 1 : 0;\n  var startScaleY = startScale;\n\n  if (isOpening) {\n    startScaleY = Math.max(1 / numItems, startScaleY);\n    currentTimeX = (0, _util.clamp)(animationProgress + _constants.TRANSITION_SCALE_ADJUSTMENT_X);\n    currentTimeY = (0, _util.clamp)((animationProgress - _constants.TRANSITION_SCALE_ADJUSTMENT_Y) / (1 - _constants.TRANSITION_SCALE_ADJUSTMENT_Y));\n  }\n\n  var easeX = ease(currentTimeX);\n  var easeY = ease(currentTimeY);\n  var scaleX = startScale + (targetScale - startScale) * easeX;\n  var scaleY = startScaleY + (targetScale - startScaleY) * easeY;\n  return {\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n};\n\nvar calculateInnerScale = function calculateInnerScale(scale) {\n  return 1 / (scale === 0 ? 1 : scale);\n};\n\nvar calculateInnerScales = exports.calculateInnerScales = function calculateInnerScales(scales) {\n  return {\n    scaleX: calculateInnerScale(scales.scaleX),\n    scaleY: calculateInnerScale(scales.scaleY)\n  };\n};","map":null,"metadata":{},"sourceType":"script"}