{"ast":null,"code":"import _classCallCheck from \"/Users/williamsnathan/src/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/williamsnathan/src/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { google } from 'googleapis';\nimport * as types from './types';\nimport { gapiUpdateStatus, memberDataLoaded } from './actions';\nimport { GoogleUserInfo } from './models';\nvar CLIENT_ID = '617186283105-5e603j6qc477f5q603nf8kef6s34aeov.apps.googleusercontent.com';\nvar SCOPES = ['https://www.googleapis.com/auth/spreadsheets'];\nvar API_KEY = 'AIzaSyBCvgn0n9lJ20sDK6jVG-92Yedf1foqjgE';\nvar SPREADSHEET_ID = '13bsAu7wG39q0khrefawv5jbgGAz9aKSOMvVfbqsmSWU';\nvar MEMBERS_SHEET_NAME = 'Members';\nvar GAPI_SCRIPT_ID = 'gapi-script';\nvar MEMBER_DATA_REFRESH_INTERVAL = 5 * 1000 * 1000;\n\nvar GapiMiddleware =\n/*#__PURE__*/\nfunction () {\n  function GapiMiddleware() {\n    var _this = this;\n\n    _classCallCheck(this, GapiMiddleware);\n\n    this.oauth2Client = new google.auth.OAuth2(CLIENT_ID);\n    this.oauth2Client.isSignedIn.listen(this.handleStatusUpdate.bind(this));\n    this.handleStatusUpdate(this.oauth2Client.isSignedIn.get());\n    var url = this.oauth2Client.generateAuthUrl({\n      // 'online' (default) or 'offline' (gets refresh_token)\n      access_type: 'offline',\n      // If you only need one scope you can pass it as a string\n      scope: SCOPES\n    });\n    var sheets = google.sheets({\n      version: 'v4',\n      auth: API_KEY\n    });\n    return function (store) {\n      _this.store = store;\n      return _this.muxer();\n    };\n  }\n\n  _createClass(GapiMiddleware, [{\n    key: \"muxer\",\n    value: function muxer() {\n      var _this2 = this;\n\n      return function (next) {\n        return function (action) {\n          if (action.type === types.GAPI_TOGGLE_AUTH) {\n            _this2.toggleAuth();\n          } else if (action.type === types.GAPI_REAUTH) {\n            _this2.reauth();\n          } else if (action.type === types.GAPI_REVOKE) {\n            _this2.revokeAccess();\n          }\n\n          return next(action);\n        };\n      };\n    }\n    /** Listener called when user signin status changes. */\n\n  }, {\n    key: \"handleStatusUpdate\",\n    value: function handleStatusUpdate(isSignedIn) {\n      var isAuthorized = false;\n      var user;\n      this.GoogleUser = this.oauth2Client.currentUser.get();\n\n      if (isSignedIn) {\n        isAuthorized = this.GoogleUser.hasGrantedScopes(SCOPE);\n        var basicProfile = this.GoogleUser.getBasicProfile();\n        user = new GoogleUserInfo(basicProfile.getId(), basicProfile.getName(), basicProfile.getGivenName(), basicProfile.getFamilyName(), basicProfile.getImageUrl(), basicProfile.getEmail());\n      }\n\n      if (this.loadMemberDataInterval) {\n        clearInterval(this.loadMemberDataInterval);\n      }\n\n      if (isAuthorized) {\n        this.loadMemberData();\n        this.loadMemberDataInterval = setInterval(this.loadMemberData.bind(this), MEMBER_DATA_REFRESH_INTERVAL);\n      }\n\n      this.store.dispatch(gapiUpdateStatus(isSignedIn, isAuthorized, user));\n    }\n  }, {\n    key: \"toggleAuth\",\n    value: function toggleAuth() {\n      if (this.GoogleAuth.isSignedIn.get()) {\n        this.GoogleAuth.signOut();\n      } else {\n        this.GoogleAuth.signIn();\n      }\n    }\n  }, {\n    key: \"reauth\",\n    value: function reauth() {\n      this.GoogleUser.grant({\n        scope: SCOPE\n      });\n    }\n  }, {\n    key: \"revokeAccess\",\n    value: function revokeAccess() {\n      this.GoogleAuth.disconnect();\n    }\n  }, {\n    key: \"loadMemberData\",\n    value: function loadMemberData() {\n      var _this3 = this;\n\n      var spreadsheetId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SPREADSHEET_ID;\n      var range = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MEMBERS_SHEET_NAME;\n      this.sheets.spreadsheets.values.get({\n        spreadsheetId: spreadsheetId,\n        range: range\n      }).then(function (response) {\n        _this3.store.dispatch(memberDataLoaded(response.result.values));\n      });\n    }\n  }]);\n\n  return GapiMiddleware;\n}();\n\nexport { GapiMiddleware as default };","map":{"version":3,"sources":["/Users/williamsnathan/src/dashboard/src/services/gapi/middleware.js"],"names":["google","types","gapiUpdateStatus","memberDataLoaded","GoogleUserInfo","CLIENT_ID","SCOPES","API_KEY","SPREADSHEET_ID","MEMBERS_SHEET_NAME","GAPI_SCRIPT_ID","MEMBER_DATA_REFRESH_INTERVAL","GapiMiddleware","oauth2Client","auth","OAuth2","isSignedIn","listen","handleStatusUpdate","bind","get","url","generateAuthUrl","access_type","scope","sheets","version","store","muxer","next","action","type","GAPI_TOGGLE_AUTH","toggleAuth","GAPI_REAUTH","reauth","GAPI_REVOKE","revokeAccess","isAuthorized","user","GoogleUser","currentUser","hasGrantedScopes","SCOPE","basicProfile","getBasicProfile","getId","getName","getGivenName","getFamilyName","getImageUrl","getEmail","loadMemberDataInterval","clearInterval","loadMemberData","setInterval","dispatch","GoogleAuth","signOut","signIn","grant","disconnect","spreadsheetId","range","spreadsheets","values","then","response","result"],"mappings":"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","sourcesContent":["import { google } from 'googleapis';\nimport * as types from './types';\nimport { gapiUpdateStatus, memberDataLoaded } from './actions';\nimport { GoogleUserInfo } from './models';\n\n\nconst CLIENT_ID = '617186283105-5e603j6qc477f5q603nf8kef6s34aeov.apps.googleusercontent.com';\nconst SCOPES = ['https://www.googleapis.com/auth/spreadsheets'];\nconst API_KEY = 'AIzaSyBCvgn0n9lJ20sDK6jVG-92Yedf1foqjgE';\n\nconst SPREADSHEET_ID = '13bsAu7wG39q0khrefawv5jbgGAz9aKSOMvVfbqsmSWU';\nconst MEMBERS_SHEET_NAME = 'Members';\n\nconst GAPI_SCRIPT_ID = 'gapi-script';\nconst MEMBER_DATA_REFRESH_INTERVAL = 5 * 1000 * 1000;\n\n\nexport default class GapiMiddleware {\n\n  constructor() {\n    this.oauth2Client = new google.auth.OAuth2(CLIENT_ID);\n    this.oauth2Client.isSignedIn.listen(this.handleStatusUpdate.bind(this));\n    this.handleStatusUpdate(this.oauth2Client.isSignedIn.get());\n\n    const url = this.oauth2Client.generateAuthUrl({\n      // 'online' (default) or 'offline' (gets refresh_token)\n      access_type: 'offline',\n\n      // If you only need one scope you can pass it as a string\n      scope: SCOPES\n    });\n\n    const sheets = google.sheets({\n      version: 'v4',\n      auth: API_KEY\n    });\n\n    return store => {\n      this.store = store;\n      return this.muxer();\n    };\n  }\n\n  muxer() {\n    return next => action => {\n      if (action.type === types.GAPI_TOGGLE_AUTH) {\n        this.toggleAuth();\n      } else if (action.type === types.GAPI_REAUTH) {\n        this.reauth();\n      } else if (action.type === types.GAPI_REVOKE) {\n        this.revokeAccess();\n      }\n      return next(action);\n    };\n  }\n\n  /** Listener called when user signin status changes. */\n  handleStatusUpdate(isSignedIn) {\n    let isAuthorized = false;\n    let user;\n\n    this.GoogleUser = this.oauth2Client.currentUser.get();\n    if (isSignedIn) {\n      isAuthorized = this.GoogleUser.hasGrantedScopes(SCOPE);\n      const basicProfile = this.GoogleUser.getBasicProfile();\n      user = new GoogleUserInfo(\n        basicProfile.getId(),\n        basicProfile.getName(),\n        basicProfile.getGivenName(),\n        basicProfile.getFamilyName(),\n        basicProfile.getImageUrl(),\n        basicProfile.getEmail());\n    }\n\n    if (this.loadMemberDataInterval) {\n      clearInterval(this.loadMemberDataInterval);\n    }\n\n    if (isAuthorized) {\n      this.loadMemberData();\n      this.loadMemberDataInterval = setInterval(\n        this.loadMemberData.bind(this), MEMBER_DATA_REFRESH_INTERVAL);\n    }\n\n    this.store.dispatch(gapiUpdateStatus(isSignedIn, isAuthorized, user));\n  }\n\n  toggleAuth() {\n    if (this.GoogleAuth.isSignedIn.get()) {\n      this.GoogleAuth.signOut();\n    } else {\n      this.GoogleAuth.signIn();\n    }\n  }\n\n  reauth() {\n    this.GoogleUser.grant({ scope: SCOPE });\n  }\n\n  revokeAccess() {\n    this.GoogleAuth.disconnect();\n  }\n\n  loadMemberData(spreadsheetId = SPREADSHEET_ID, range = MEMBERS_SHEET_NAME) {\n    this.sheets.spreadsheets.values\n      .get({ spreadsheetId, range })\n      .then((response) => {\n        this.store.dispatch(memberDataLoaded(response.result.values));\n      });\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}